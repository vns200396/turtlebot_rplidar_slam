controller_frequency: 3.0
recovery_behavior_enabled: true
clearing_rotation_allowed: true

TrajectoryPlannerROS:
   max_vel_x: 0.2
   min_vel_x: 0.05
   max_vel_y: 0.0  # zero for a differential drive robot
   min_vel_y: 0.0
   min_in_place_vel_theta: 0.02
   escape_vel: -0.1
   acc_lim_x: 0.05
   acc_lim_y: 0.0 # zero for a differential drive robot
   acc_lim_theta: 0.05

   holonomic_robot: false
     # goal tolerance parameters
   yaw_goal_tolerance: 0.1 # about 6 degrees
   xy_goal_tolerance: 0.1  # 10 cm
   latch_xy_goal_tolerance: false
   pdist_scale: 0.4
   gdist_scale: 0.8

   heading_scoring: true
   heading_scoring_timestep: 0.8
   publish_cost_grid_pc: false
   prune_plan: true

   sim_time: 1.0                          # The amount of time to forward-simulate trajectories in seconds
   sim_granularity: 0.025               # The step size, in meters, to take between points on a given trajectory
   angular_sim_granularity: 0.025        # The step size, in radians, to take between angular samples on a given trajectory.
   vx_samples: 8                       # The number of samples to use when exploring the x velocity space
   vy_samples: 0 # zero for a differential drive robot
   vtheta_samples: 20                   # The number of samples to use when exploring the theta velocity space
   simple_attractor: false
   controller_frequency: 10             # The frequency at which this controller will be called in Hz

   # Trajectory Scoring Parameters
   meter_scoring: true              # If true, distances are expressed in meters; otherwise grid cells
   path_distance_bias: 1.0          # The weighting for how much the controller should stay close to the path it was given
   goal_distance_bias: 0.8          # The weighting for how much the controller should attempt to reach its local goal, also controls speed
   occdist_scale: 0.01              # The weighting for how much the controller should attempt to avoid obstacles
                                    # occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))
   heading_lookahead: 0.325         # How far to look ahead in meters when scoring different in-place-rotation trajectories
   oscillation_reset_dist: 0.05     # How far the robot must travel in meters before oscillation flags are reset
   publish_cost_grid: true
   dwa: true                       # Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout

